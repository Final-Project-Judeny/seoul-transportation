version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    hostname: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_SERVERS: zookeeper:2888:3888
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.zookeeper == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  kafka1:
    image: confluentinc/cp-kafka:7.3.2
    hostname: kafka1
    ports:
      - "9092:9092"
      - "29092:29092"
      - "19092:19092"
      - "9001:9001"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka1:19092,EXTERNAL://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_JMX_PORT: 9001
      KAFKA_JMX_HOSTNAME: kafka1
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.authorizer.AclAuthorizer
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "true"

      KAFKA_MAX_MESSAGE_BYTES: 20971520 # 20MB
      KAFKA_MESSAGE_MAX_BYTES: 20971520 # 20MB
      KAFKA_SOCKET_REQUEST_MAX_BYTES: 20971520 # 20MB

    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.broker == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry:7.3.2
    hostname: kafka-schema-registry
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
      SCHEMA_REGISTRY_HOST_NAME: kafka-schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.zookeeper == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.2
    hostname: kafka-rest-proxy
    ports:
      - "8082:8082"
    environment:
      # KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082/
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://kafka-schema-registry:8081/
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.zookeeper == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  kafka-connect:
    image: confluentinc/cp-kafka-connect:7.3.2
    hostname: kafka-connect
    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: "kafka1:19092"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://kafka-schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "kafka-connect"
      CONNECT_LOG4J_ROOT_LOGLEVEL: "INFO"
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: "1"
      CONNECT_PLUGIN_PATH: '/usr/share/java,/etc/kafka-connect/jars,/usr/share/confluent-hub-components'

      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 20971520 # 20MB
      CONNECT_MAX_REQUEST_SIZE: 20971520 # 20MB
      AWS_ACCESS_KEY_ID: 
      AWS_SECRET_ACCESS_KEY: 
      AWS_DEFAULT_REGION: 


    volumes:
      - ./connectors:/etc/kafka-connect/jars/
    command:
      - bash
      - -c
      - |
        confluent-hub install --no-prompt debezium/debezium-connector-mysql:latest
        confluent-hub install --no-prompt confluentinc/kafka-connect-datagen:0.4.0
        confluent-hub install --no-prompt jcustenborder/kafka-connect-http:0.0.0.1
        confluent-hub install --no-prompt confluentinc/kafka-connect-s3:latest
        confluent-hub install --no-prompt confluentinc/kafka-connect-http-source:latest
        confluent-hub install --no-prompt mongodb/kafka-connect-mongodb:latest
        /etc/confluent/docker/run

    networks:
      - kafka-net
    dns:
      - 8.8.8.8
      - 8.8.4.4
    deploy:
      placement:
        constraints:
          - node.labels.connect == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  ksqldb-server:
    image: confluentinc/cp-ksqldb-server:7.3.2
    hostname: ksqldb-server
    ports:
      - "8088:8088"
    environment:
      KSQL_BOOTSTRAP_SERVERS: PLAINTEXT://kafka1:19092
      KSQL_LISTENERS: http://0.0.0.0:8088/
      KSQL_KSQL_SERVICE_ID: ksqldb-server_
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.zookeeper == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  postgresql:
    image: postgres:14
    hostname: postgresql
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: "conduktor-console"
      POSTGRES_USER: "conduktor"
      POSTGRES_PASSWORD: "some_password"
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256"
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.zookeeper == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  conduktor-console:
    image: conduktor/conduktor-console:1.24.1
    hostname: conduktor-console
    ports:
      - "8080:8080"
    volumes:
      - conduktor_data:/var/conduktor
    environment:
      CDK_DATABASE_URL: "postgresql://conduktor:some_password@postgresql:5432/conduktor-console"
      CDK_CLUSTERS_0_ID: "default"
      CDK_CLUSTERS_0_NAME: "My Local Kafka Cluster"
      CDK_CLUSTERS_0_COLOR: "#0013E7"
      CDK_CLUSTERS_0_BOOTSTRAPSERVERS: "PLAINTEXT://kafka1:19092"
      CDK_CLUSTERS_0_SCHEMAREGISTRY_URL: "http://kafka-schema-registry:8081"
      CDK_CLUSTERS_0_KAFKACONNECTS_0_URL: "http://kafka-connect:8083"
      CDK_CLUSTERS_0_KAFKACONNECTS_0_NAME: "full stack kafka connect"
      CDK_ORGANIZATION_NAME: "Judeny"
      CDK_ADMIN_EMAIL: "admin@admin.io"
      CDK_ADMIN_PASSWORD: "admin"
      CDK_MONITORING_CORTEX-URL: http://conduktor-monitoring:9009/
      CDK_MONITORING_ALERT-MANAGER-URL: http://conduktor-monitoring:9010/
      CDK_MONITORING_CALLBACK-URL: http://conduktor-console:8080/monitoring/api/
      CDK_MONITORING_NOTIFICATIONS-CALLBACK-URL: http://localhost:8080
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.mongo == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  conduktor-monitoring:
    hostname: conduktor-monitoring
    container_name: conduktor-monitoring
    image: conduktor/conduktor-console-cortex:1.24.1
    environment:
      CDK_CONSOLE-URL: "http://conduktor-console:8080"

    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.mongo == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any


  mongodb:
    image: mongo:latest
    hostname: mongodb
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ***
      MONGO_INITDB_ROOT_PASSWORD: ***
    ports:
      - "27017:27017"
    volumes:
      - /home/ubuntu/mongo/mongod.conf:/etc/mongod.conf:rw
      - /home/ubuntu/mongo/mongod.conf.orig:/etc/mongod.conf.orig:rw
      - mongodb_data:/data/db

    networks:
      - kafka-net
    dns:
      - 8.8.8.8
      - 8.8.4.4
    deploy:
      placement:
        constraints:
          - node.labels.mongo == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  mongodb-bi-connector:
    image: yiluxiangbei/mongodb-bi-connector:v2.14.4
    container_name: mongodb-bi-connector
    restart: always
    ports:
      - 3307:3307
    environment:
      MONGODB_HOST: mongodb
      MONGODB_PORT: 27017
      MONGO_USERNAME: Judeny
      MONGO_PASSWORD: Judeny123!
      SCHEMA_REFRESH: 7
    networks:
      - kafka-net
    dns:
      - 8.8.8.8
      - 8.8.4.4
    deploy:
      placement:
        constraints:
          - node.labels.mongo == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any


  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "7777:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=kafka_ui
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:19092 #kafka-node2:9092,kafka-node3:9092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.zookeeper == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  kafka-streams-app:
    image: wsh120/kafka-streams-app
    container_name: kafka-streams-app

    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka1:19092
      APPLICATION_ID: kafka-streams-app
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.connect == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any

  cmak:
    image: ghcr.io/eshepelyuk/dckr/cmak-3.0.0.5:latest
    ports:
      - 9000:9000
    environment:
      ZK_HOSTS: "zookeeper:2181"
    networks:
      - kafka-net
    deploy:
      placement:
        constraints:
          - node.labels.mongo == true
      replicas: 1
      update_config:
        parallelism: 1
      restart_policy:
        condition: any


volumes:
  pg_data: {}
  conduktor_data: {}
  mongodb_data: {}

networks:
  kafka-net:
    external: true
